
Idea: Classes to model SCFT states and differences between states

It would be useful to have class that represents a solution to a SCF problem, along 
with tools to control file IO of this information and to compare different solutions.
Different implementations would be required for different SCFT tools (e.g., fd1d vs.
pspc). The state would always include the w-fields for all monomers, and should include 
all other parameters that are adjusted during iterative solution. 

In codes designed to solve SCFT for periodic structures with an ajustable unit cell, 
the state data would include unit cell dimensions as well as w field configurations. 
The field formats designed for the fortran code all stored precisely this information, 
giving information about unit cell dimensions in a standard file header.

Rationale - This seems potentially useful for two purposes:

1) A templatizable way of storing histories during a sweep operation.

2) An aid to writing compact regression tests of SCFT solutions.


-----------------------------------------------------------------------------------------
Proposed class interfaces:


class IteratorState 
{

   clear();

   setFieldIO(FieldIO& fieldIO);

   // Assignment operator from a State
   operator = (State& )

   // Assignment operator from a System
   operator = (System& )

   // File IO methods
   readBasisFormat(std::in )
   writeBasisFormat(std::in )
   
   readRgridFormat(std::in )
   writeRgridFormat(std::in )

   // Create a linear combination of states, store in this object.
   makeLinearCombination(Array<State> states, Array<double> coeffs);

}

class IteratorStateComparison 
{

   // Lifetime methods
   setFieldIo(FieldIo& fieldIo);

   clear();

   // Methods that make a comparison

   void compare(State&, State&)

   void readBasis(State&, std::in file)
   void readBasis(std::in& file1, std::in file2);

   void readRgrid(State&, std::in file)
   void readRgrid(std::in& file1, std::in file2);

   // Accessors

   double fieldMaxDiff();

   double fieldRmsDiff();

   double cellMaxDiff();

   double cellRmsDiff();

private:

   double fieldMaxDiff_;

   double fieldRmsDiff_;

   double cellMaxDiff_;

   double cellRmsDiff_;

}
